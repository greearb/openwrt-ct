From 1dacc6d09348209c02162d8ae0ad57d560f8faa2 Mon Sep 17 00:00:00 2001
From: Ben Greear <greearb@candelatech.com>
Date: Fri, 21 Nov 2014 14:00:29 -0500
Subject: [PATCH 26/37] cfg80211: print reasons for ibss join failures to
 kernel logs.

Helps users know what is wrong with their supplicant config
and perhaps why driver fails to properly do an ibss join.

Signed-off-by: Ben Greear <greearb@candelatech.com>
---
 net/wireless/nl80211.c | 81 +++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 63 insertions(+), 18 deletions(-)

diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 3de415b..48d56cb 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -2106,8 +2106,10 @@ static int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 {
 	u32 control_freq;
 
-	if (!info->attrs[NL80211_ATTR_WIPHY_FREQ])
+	if (!info->attrs[NL80211_ATTR_WIPHY_FREQ]) {
+		pr_err("parse-chandef:  no FREQ defined.\n");
 		return -EINVAL;
+	}
 
 	control_freq = nla_get_u32(info->attrs[NL80211_ATTR_WIPHY_FREQ]);
 
@@ -2117,8 +2119,11 @@ static int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 	chandef->center_freq2 = 0;
 
 	/* Primary channel not allowed */
-	if (!chandef->chan || chandef->chan->flags & IEEE80211_CHAN_DISABLED)
+	if (!chandef->chan || chandef->chan->flags & IEEE80211_CHAN_DISABLED) {
+		pr_err("parse-chandef: Primary channel not allowed: chan: %p  freq: %d\n",
+		       chandef->chan, control_freq);
 		return -EINVAL;
+	}
 
 	if (info->attrs[NL80211_ATTR_WIPHY_CHANNEL_TYPE]) {
 		enum nl80211_channel_type chantype;
@@ -2135,6 +2140,8 @@ static int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 						chantype);
 			break;
 		default:
+			pr_err("parse-chandef, invalid chantype: %d\n",
+			       chantype);
 			return -EINVAL;
 		}
 	} else if (info->attrs[NL80211_ATTR_CHANNEL_WIDTH]) {
@@ -2150,17 +2157,23 @@ static int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 					info->attrs[NL80211_ATTR_CENTER_FREQ2]);
 	}
 
-	if (!cfg80211_chandef_valid(chandef))
+	if (!cfg80211_chandef_valid(chandef)) {
+		pr_err("parse-chandef:  chandef is not valid\n");
 		return -EINVAL;
+	}
 
 	if (!cfg80211_chandef_usable(&rdev->wiphy, chandef,
-				     IEEE80211_CHAN_DISABLED))
+				     IEEE80211_CHAN_DISABLED)) {
+		pr_err("parse-chandef: chandef is not usable.\n");
 		return -EINVAL;
+	}
 
 	if ((chandef->width == NL80211_CHAN_WIDTH_5 ||
 	     chandef->width == NL80211_CHAN_WIDTH_10) &&
-	    !(rdev->wiphy.flags & WIPHY_FLAG_SUPPORTS_5_10_MHZ))
+	    !(rdev->wiphy.flags & WIPHY_FLAG_SUPPORTS_5_10_MHZ)) {
+		pr_err("parse-chandef:  5/10 Mhz is not supported.\n");
 		return -EINVAL;
+	}
 
 	return 0;
 }
@@ -8438,12 +8451,16 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 
 	memset(&ibss, 0, sizeof(ibss));
 
-	if (!is_valid_ie_attr(info->attrs[NL80211_ATTR_IE]))
+	if (!is_valid_ie_attr(info->attrs[NL80211_ATTR_IE])) {
+		pr_err("join-ibss:  ATTR_IE is not valid.\n");
 		return -EINVAL;
+	}
 
 	if (!info->attrs[NL80211_ATTR_SSID] ||
-	    !nla_len(info->attrs[NL80211_ATTR_SSID]))
+	    !nla_len(info->attrs[NL80211_ATTR_SSID])) {
+		pr_err("join-ibss: ATTR_SSID is not valid.\n");
 		return -EINVAL;
+	}
 
 	ibss.beacon_interval = 100;
 
@@ -8453,22 +8470,32 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 
 	err = cfg80211_validate_beacon_int(rdev, NL80211_IFTYPE_ADHOC,
 					   ibss.beacon_interval);
-	if (err)
+	if (err) {
+		pr_err("join-ibss: Beacon interval is bad: %d, err: %d\n",
+		       ibss.beacon_interval, err);
 		return err;
+	}
 
-	if (!rdev->ops->join_ibss)
+	if (!rdev->ops->join_ibss) {
+		pr_err("join-ibss:  no join_ibss ops in driver.\n");
 		return -EOPNOTSUPP;
+	}
 
-	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_ADHOC)
+	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_ADHOC) {
+		pr_err("join-ibss: iftype is invalid.\n");
 		return -EOPNOTSUPP;
+	}
 
 	wiphy = &rdev->wiphy;
 
 	if (info->attrs[NL80211_ATTR_MAC]) {
 		ibss.bssid = nla_data(info->attrs[NL80211_ATTR_MAC]);
 
-		if (!is_valid_ether_addr(ibss.bssid))
+		if (!is_valid_ether_addr(ibss.bssid)) {
+			pr_err("join-ibss: ibss bssid is invalid: %pM\n",
+			       ibss.bssid);
 			return -EINVAL;
+		}
 	}
 	ibss.ssid = nla_data(info->attrs[NL80211_ATTR_SSID]);
 	ibss.ssid_len = nla_len(info->attrs[NL80211_ATTR_SSID]);
@@ -8479,12 +8506,16 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	err = nl80211_parse_chandef(rdev, info, &ibss.chandef);
-	if (err)
+	if (err) {
+		pr_err("join-ibss:  parse-chandef fails.\n");
 		return err;
+	}
 
 	if (!cfg80211_reg_can_beacon(&rdev->wiphy, &ibss.chandef,
-				     NL80211_IFTYPE_ADHOC))
+				     NL80211_IFTYPE_ADHOC)) {
+		pr_err("join-ibss: adhoc cannot beacon.\n");
 		return -EINVAL;
+	}
 
 	switch (ibss.chandef.width) {
 	case NL80211_CHAN_WIDTH_5:
@@ -8506,6 +8537,8 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 			return -EINVAL;
 		break;
 	default:
+		pr_err("join-ibss:  Invalid chandef width: %d (features: 0x%x)\n",
+		       ibss.chandef.width, rdev->wiphy.features);
 		return -EINVAL;
 	}
 
@@ -8522,8 +8555,10 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 
 		err = ieee80211_get_ratemask(sband, rates, n_rates,
 					     &ibss.basic_rates);
-		if (err)
+		if (err) {
+			pr_err("join-ibss: get-ratemask failed.\n");
 			return err;
+		}
 	}
 
 	if (info->attrs[NL80211_ATTR_HT_CAPABILITY_MASK])
@@ -8532,8 +8567,10 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 		       sizeof(ibss.ht_capa_mask));
 
 	if (info->attrs[NL80211_ATTR_HT_CAPABILITY]) {
-		if (!info->attrs[NL80211_ATTR_HT_CAPABILITY_MASK])
+		if (!info->attrs[NL80211_ATTR_HT_CAPABILITY_MASK]) {
+			pr_err("join-ibss: no HT capability mask.\n");
 			return -EINVAL;
+		}
 		memcpy(&ibss.ht_capa,
 		       nla_data(info->attrs[NL80211_ATTR_HT_CAPABILITY]),
 		       sizeof(ibss.ht_capa));
@@ -8541,8 +8578,10 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 
 	if (info->attrs[NL80211_ATTR_MCAST_RATE] &&
 	    !nl80211_parse_mcast_rate(rdev, ibss.mcast_rate,
-			nla_get_u32(info->attrs[NL80211_ATTR_MCAST_RATE])))
+			nla_get_u32(info->attrs[NL80211_ATTR_MCAST_RATE]))) {
+		pr_err("join-ibss: failure to parse mcast rate.\n");
 		return -EINVAL;
+	}
 
 	if (ibss.privacy && info->attrs[NL80211_ATTR_KEYS]) {
 		bool no_ht = false;
@@ -8550,12 +8589,16 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 		connkeys = nl80211_parse_connkeys(rdev,
 					  info->attrs[NL80211_ATTR_KEYS],
 					  &no_ht);
-		if (IS_ERR(connkeys))
+		if (IS_ERR(connkeys)) {
+			pr_err("join-ibss:  connkeys is bad.\n");
 			return PTR_ERR(connkeys);
+		}
 
 		if ((ibss.chandef.width != NL80211_CHAN_WIDTH_20_NOHT) &&
 		    no_ht) {
 			kzfree(connkeys);
+			pr_err("join-ibss: chandef does not match HT: %d no-ht: %d\n",
+			       ibss.chandef.width, (int)(no_ht));
 			return -EINVAL;
 		}
 	}
@@ -8567,8 +8610,10 @@ static int nl80211_join_ibss(struct sk_buff *skb, struct genl_info *info)
 		nla_get_flag(info->attrs[NL80211_ATTR_HANDLE_DFS]);
 
 	err = cfg80211_join_ibss(rdev, dev, &ibss, connkeys);
-	if (err)
+	if (err) {
+		pr_err("join-ibss: cfg-join-ibss failed.\n");
 		kzfree(connkeys);
+	}
 	return err;
 }
 
-- 
2.4.11

